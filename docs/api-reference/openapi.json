{
  "openapi": "3.1.0",
  "info": {
    "title": "Klavis AI (https://www.klavis.ai)",
    "description": "Klavis AI - Open Source MCP Integrations for AI Applications",
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api.klavis.ai",
      "description": "Production server"
    }
  ],
  "paths": {
    "/mcp-server/call-tool": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Call Tool",
        "description": "Calls a tool on a specific remote MCP server, used for function calling. Eliminates the need for manual MCP code implementation.\nUnder the hood, Klavis will instantiates an MCP client and establishes a connection with the remote MCP server to call the tool.",
        "operationId": "callServerTool",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CallToolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CallToolResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/list-tools": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "List Tools",
        "description": "Lists all tools available for a specific remote MCP server in various AI model formats.\n\nThis eliminates the need for manual MCP code implementation and format conversion.\nUnder the hood, Klavis instantiates an MCP client and establishes a connection \nwith the remote MCP server to retrieve available tools.",
        "operationId": "listServerTools",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ListToolsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListToolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/instance/create": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Create Server Instance",
        "description": "Creates a URL for a specified MCP server,\nvalidating the request with an API key and user details.\nReturns the existing server URL if it already exists for the user.\nIf OAuth is configured for the server, also returns the base OAuth authorization URL.",
        "operationId": "createServerInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServerResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/unified/instance/create": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Create Unified MCP Server Instance",
        "description": "Creates a URL for the Unified MCP server,\nvalidating the request with an API key and user details.\nReturns the existing server URL if it already exists for the user.",
        "operationId": "createUnifiedMCPServerInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUnifiedServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateServerResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/self-hosted/instance/create": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Create a Self-Hosted MCP Server Instance",
        "description": "Creates an instance id for a self-hosted MCP server,\nvalidating the request with an API key and user details.\nThe main purpose of this endpoint is to create an instance id for a self-hosted MCP server.\nThe instance id is used to identify and store the auth metadata in the database.\nReturns the existing instance id if it already exists for the user.",
        "operationId": "createSelfHostedServerInstance",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSelfHostedServerRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSelfHostedServerResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/instance/get/{instance_id}": {
      "get": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Get Server Instance",
        "description": "Checks the details of a specific server connection instance using its unique ID and API key,\nreturning server details like authentication status and associated server/platform info.",
        "operationId": "getServerInstance",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the connection instance whose status is being checked. This is returned by the Create API.",
              "title": "Instance Id"
            },
            "description": "The ID of the connection instance whose status is being checked. This is returned by the Create API."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetInstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server/instance/delete-auth/{instance_id}": {
      "delete": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Delete Auth data for Server Instance",
        "description": "Deletes authentication data for a specific server connection instance.",
        "operationId": "deleteInstanceAuth",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the connection instance to delete auth for.",
              "title": "Instance Id"
            },
            "description": "The ID of the connection instance to delete auth for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server/instance/delete/{instance_id}": {
      "delete": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Delete Server Instance",
        "description": "Completely removes a server connection instance using its unique ID,\ndeleting all associated data from the system.",
        "operationId": "deleteServerInstance",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the connection instance to delete.",
              "title": "Instance Id"
            },
            "description": "The ID of the connection instance to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server/tools/{server_name}": {
      "get": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Get Tools",
        "description": "Get list of tool names for a specific MCP server.\nMainly used for querying metadata about the MCP server.",
        "operationId": "getServerTools",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "server_name",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/McpServerName",
              "description": "The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid)."
            },
            "description": "The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid)."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetToolsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server/servers": {
      "get": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Get All Servers",
        "description": "Get all MCP servers with their basic information including id, name, description, and tools.",
        "operationId": "getAllMcpServers",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMcpServersResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/instance/set-auth-token": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Set Auth Token",
        "description": "Sets an authentication token for a specific instance.\nThis updates the auth_metadata for the specified instance.",
        "operationId": "setInstanceAuthToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SetAuthTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/mcp-server/instance/get-auth/{instance_id}": {
      "get": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Get Authentication Data",
        "description": "Retrieves the auth data for a specific instance that the API key owner controls.\nIncludes access token, refresh token, and other authentication data.\n\nThis endpoint includes proper ownership verification to ensure users can only access\nauthentication data for instances they own. It also handles token refresh if needed.",
        "operationId": "getInstanceAuthData",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "description": "The ID of the connection instance to get auth data for.",
              "title": "Instance Id"
            },
            "description": "The ID of the connection instance to get auth data for."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAuthDataResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/mcp-server/oauth-url": {
      "post": {
        "tags": [
          "mcp-server"
        ],
        "summary": "Get OAuth URL",
        "description": "Gets the OAuth authorization URL for a specific MCP server and instance.\nReturns the complete OAuth URL with the instance ID as a query parameter.",
        "operationId": "getOAuthUrl",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetOAuthUrlRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOAuthUrlResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/white-labeling/create": {
      "post": {
        "tags": [
          "white-labeling"
        ],
        "summary": "Create White Label",
        "description": "Saves OAuth white labeling information, or updates existing information if the `client_id` matches.",
        "operationId": "createWhiteLabeling",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWhiteLabelingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhiteLabelingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "HTTPBearer": []
          }
        ]
      }
    },
    "/white-labeling/get/{client_id}": {
      "get": {
        "tags": [
          "white-labeling"
        ],
        "summary": "Get White Label",
        "description": "Retrieves white labeling information for a specific OAuth client ID.",
        "operationId": "getWhiteLabelingByClientId",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "client_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Client Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WhiteLabelingResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/instances": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get User Instances",
        "description": "Get all MCP server instances information by user ID and platform name.",
        "operationId": "getServerInstancesByUser",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The external user ID",
              "title": "User Id"
            },
            "description": "The external user ID"
          },
          {
            "name": "platform_name",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The platform name",
              "title": "Platform Name"
            },
            "description": "The platform name"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetServerInstancesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/user/delete/{user_id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete User",
        "description": "Delete a user and all associated data by user_id.\nUsers cannot delete their own accounts.\nThis operation will permanently remove all user data.",
        "operationId": "deleteUserByUserId",
        "security": [
          {
            "HTTPBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "description": "The identifier for the user to delete.",
              "title": "User Id"
            },
            "description": "The identifier for the user to delete."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteUserResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/slack/authorize": {
      "get": {
        "tags": [
          "slack-oauth"
        ],
        "summary": "Authorize Slack",
        "description": "Start Slack OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- user_scope: Optional user-specific scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeSlack",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "user_scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional user-specific OAuth scopes to request (comma-separated string)",
              "title": "User Scope"
            },
            "description": "Optional user-specific OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/github/authorize": {
      "get": {
        "tags": [
          "github-oauth"
        ],
        "summary": "Authorize Github",
        "description": "Start GitHub OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGithub",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/supabase/authorize": {
      "get": {
        "tags": [
          "supabase-oauth"
        ],
        "summary": "Authorize Supabase",
        "description": "Start Supabase OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeSupabase",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/notion/authorize": {
      "get": {
        "tags": [
          "notion-oauth"
        ],
        "summary": "Authorize Notion",
        "description": "Start Notion OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeNotion",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/jira/authorize": {
      "get": {
        "tags": [
          "jira-oauth"
        ],
        "summary": "Authorize Jira",
        "description": "Start Jira OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeJira",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/confluence/authorize": {
      "get": {
        "tags": [
          "confluence-oauth"
        ],
        "summary": "Authorize Confluence",
        "description": "Start Confluence OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeConfluence",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/wordpress/authorize": {
      "get": {
        "tags": [
          "wordpress-oauth"
        ],
        "summary": "Authorize Wordpress",
        "description": "Start WordPress OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeWordpress",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/gmail/authorize": {
      "get": {
        "tags": [
          "gmail-oauth"
        ],
        "summary": "Authorize Gmail",
        "description": "Start Gmail OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGmail",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/gdrive/authorize": {
      "get": {
        "tags": [
          "gdrive-oauth"
        ],
        "summary": "Authorize Gdrive",
        "description": "Start Google Drive OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGDrive",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/gcalendar/authorize": {
      "get": {
        "tags": [
          "gcalendar-oauth"
        ],
        "summary": "Authorize Gcalendar",
        "description": "Start Google Calendar OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGCalendar",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/gsheets/authorize": {
      "get": {
        "tags": [
          "gsheets-oauth"
        ],
        "summary": "Authorize Gsheets",
        "description": "Start Google Sheets OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGSheets",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/gdocs/authorize": {
      "get": {
        "tags": [
          "gdocs-oauth"
        ],
        "summary": "Authorize Gdocs",
        "description": "Start Google Docs OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeGDocs",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/attio/authorize": {
      "get": {
        "tags": [
          "attio-oauth"
        ],
        "summary": "Authorize Attio",
        "description": "Start Attio OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeAttio",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/salesforce/authorize": {
      "get": {
        "tags": [
          "salesforce-oauth"
        ],
        "summary": "Authorize Salesforce",
        "description": "Start Salesforce OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated)\n- redirect_url: Optional URL to redirect to after authorization completes\n- instance_url: Optional Salesforce instance URL for sandbox or custom domains",
        "operationId": "authorizeSalesforce",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          },
          {
            "name": "instance_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Salesforce instance URL (e.g., https://mycompany.salesforce.com). If not provided, will use default login.salesforce.com",
              "title": "Instance Url"
            },
            "description": "Salesforce instance URL (e.g., https://mycompany.salesforce.com). If not provided, will use default login.salesforce.com"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/asana/authorize": {
      "get": {
        "tags": [
          "asana-oauth"
        ],
        "summary": "Authorize Asana",
        "description": "Start Asana OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeAsana",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/linear/authorize": {
      "get": {
        "tags": [
          "linear-oauth"
        ],
        "summary": "Authorize Linear",
        "description": "Start Linear OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeLinear",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/close/authorize": {
      "get": {
        "tags": [
          "close-oauth"
        ],
        "summary": "Authorize Close",
        "description": "Start Close OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeClose",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/clickup/authorize": {
      "get": {
        "tags": [
          "clickup-oauth"
        ],
        "summary": "Authorize Clickup",
        "description": "Start ClickUp OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeClickUp",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/airtable/authorize": {
      "get": {
        "tags": [
          "airtable-oauth"
        ],
        "summary": "Authorize Airtable",
        "description": "Start Airtable OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeAirtable",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/hubspot/authorize": {
      "get": {
        "tags": [
          "hubspot-oauth"
        ],
        "summary": "Authorize Hubspot",
        "description": "Start HubSpot OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeHubspot",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/linkedin/authorize": {
      "get": {
        "tags": [
          "linkedin-oauth"
        ],
        "summary": "Authorize Linkedin",
        "description": "Start LinkedIn OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (comma-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeLinkedIn",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (comma-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (comma-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/canva/authorize": {
      "get": {
        "tags": [
          "canva-oauth"
        ],
        "summary": "Authorize Canva",
        "description": "Start Canva OAuth flow with PKCE\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated, e.g., \"design:meta:read profile:read\")\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeCanva",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/xero/authorize": {
      "get": {
        "tags": [
          "xero-oauth"
        ],
        "summary": "Authorize Xero",
        "description": "Start Xero OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeXero",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/dropbox/authorize": {
      "get": {
        "tags": [
          "dropbox-oauth"
        ],
        "summary": "Authorize Dropbox",
        "description": "Start Dropbox OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated)\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeDropbox",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/oauth/quickbooks/authorize": {
      "get": {
        "tags": [
          "quickbooks-oauth"
        ],
        "summary": "Authorize Quickbooks",
        "description": "Start QuickBooks OAuth flow\n\nParameters:\n- instance_id: Identifier for the instance requesting authorization\n- client_id: Optional client ID for white labeling\n- scope: Optional scopes to request (space-separated). Default is 'com.intuit.quickbooks.accounting'\n- redirect_url: Optional URL to redirect to after authorization completes",
        "operationId": "authorizeQuickBooks",
        "parameters": [
          {
            "name": "instance_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Unique identifier for the client instance requesting authorization",
              "title": "Instance Id"
            },
            "description": "Unique identifier for the client instance requesting authorization"
          },
          {
            "name": "client_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Client ID for white labeling, if not provided will use default credentials",
              "title": "Client Id"
            },
            "description": "Client ID for white labeling, if not provided will use default credentials"
          },
          {
            "name": "scope",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional OAuth scopes to request (space-separated string)",
              "title": "Scope"
            },
            "description": "Optional OAuth scopes to request (space-separated string)"
          },
          {
            "name": "redirect_url",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "Optional URL to redirect to after authorization completes",
              "title": "Redirect Url"
            },
            "description": "Optional URL to redirect to after authorization completes"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CallToolRequest": {
        "properties": {
          "serverUrl": {
            "type": "string",
            "title": "Serverurl",
            "description": "The full URL for connecting to the MCP server"
          },
          "toolName": {
            "type": "string",
            "title": "Toolname",
            "description": "The name of the tool to call"
          },
          "toolArgs": {
            "additionalProperties": true,
            "type": "object",
            "title": "Toolargs",
            "description": "The input parameters for the tool"
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType",
            "description": "The connection type to use for the MCP server. Default is STREAMABLE_HTTP.",
            "default": "StreamableHttp"
          }
        },
        "type": "object",
        "required": [
          "serverUrl",
          "toolName"
        ],
        "title": "CallToolRequest"
      },
      "CallToolResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the API call was successful"
          },
          "result": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CallToolResult"
              },
              {
                "type": "null"
              }
            ],
            "description": "The result of the tool call, if successful"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message, if the tool call failed"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "CallToolResponse"
      },
      "CallToolResult": {
        "properties": {
          "content": {
            "items": {},
            "type": "array",
            "title": "Content",
            "description": "The content of the tool call"
          },
          "isError": {
            "type": "boolean",
            "title": "Iserror",
            "description": "Whether the tool call was successful",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "CallToolResult",
        "description": "The server's response to a tool call."
      },
      "ConnectionType": {
        "type": "string",
        "enum": [
          "SSE",
          "StreamableHttp"
        ],
        "title": "ConnectionType"
      },
      "CreateSelfHostedServerRequest": {
        "properties": {
          "serverName": {
            "$ref": "#/components/schemas/McpServerName",
            "description": "The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid)."
          },
          "userId": {
            "type": "string",
            "minLength": 1,
            "title": "Userid",
            "description": "The identifier for the user requesting the server URL."
          }
        },
        "type": "object",
        "required": [
          "serverName",
          "userId"
        ],
        "title": "CreateSelfHostedServerRequest"
      },
      "CreateSelfHostedServerResponse": {
        "properties": {
          "instanceId": {
            "type": "string",
            "title": "Instanceid",
            "description": "The unique identifier for this specific server connection instance."
          },
          "oauthUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauthurl",
            "description": "The OAuth authorization URL for the specified server, if OAuth is configured."
          }
        },
        "type": "object",
        "required": [
          "instanceId"
        ],
        "title": "CreateSelfHostedServerResponse"
      },
      "CreateServerRequest": {
        "properties": {
          "serverName": {
            "$ref": "#/components/schemas/McpServerName",
            "description": "The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid)."
          },
          "userId": {
            "type": "string",
            "minLength": 1,
            "title": "Userid",
            "description": "The identifier for the user requesting the server URL."
          },
          "platformName": {
            "type": "string",
            "minLength": 1,
            "title": "Platformname",
            "description": "The name of the platform associated with the user."
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType",
            "description": "The connection type to use for the MCP server. Default is STREAMABLE_HTTP.",
            "default": "StreamableHttp"
          }
        },
        "type": "object",
        "required": [
          "serverName",
          "userId",
          "platformName"
        ],
        "title": "CreateServerRequest"
      },
      "CreateServerResponse": {
        "properties": {
          "serverUrl": {
            "type": "string",
            "title": "Serverurl",
            "description": "The full URL for connecting to the MCP server, including the instance ID."
          },
          "instanceId": {
            "type": "string",
            "title": "Instanceid",
            "description": "The unique identifier for this specific server connection instance."
          },
          "oauthUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Oauthurl",
            "description": "The OAuth authorization URL for the specified server, if OAuth is configured."
          }
        },
        "type": "object",
        "required": [
          "serverUrl",
          "instanceId"
        ],
        "title": "CreateServerResponse"
      },
      "CreateUnifiedServerRequest": {
        "properties": {
          "userId": {
            "type": "string",
            "minLength": 1,
            "title": "Userid",
            "description": "The identifier for the user requesting the server URL."
          },
          "platformName": {
            "type": "string",
            "minLength": 1,
            "title": "Platformname",
            "description": "The name of the platform associated with the user."
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType",
            "description": "The connection type to use for the MCP server. Default is STREAMABLE_HTTP.",
            "default": "StreamableHttp"
          }
        },
        "type": "object",
        "required": [
          "userId",
          "platformName"
        ],
        "title": "CreateUnifiedServerRequest"
      },
      "CreateWhiteLabelingRequest": {
        "properties": {
          "client_id": {
            "type": "string",
            "title": "Client Id",
            "description": "OAuth client ID"
          },
          "client_secret": {
            "type": "string",
            "title": "Client Secret",
            "description": "OAuth client secret"
          },
          "server_name": {
            "$ref": "#/components/schemas/OAuthServerName",
            "description": "Optional. The name of the server"
          },
          "callback_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Callback Url",
            "description": "Optional. OAuth callback URL"
          },
          "account_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Account Id",
            "description": "Optional. The UUID of the account"
          }
        },
        "type": "object",
        "required": [
          "client_id",
          "client_secret",
          "server_name"
        ],
        "title": "CreateWhiteLabelingRequest"
      },
      "DeleteUserResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success",
          "message"
        ],
        "title": "DeleteUserResponse"
      },
      "ExtendedMcpServer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ServerTool"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "authNeeded": {
            "type": "boolean",
            "title": "Authneeded",
            "default": true
          },
          "isAuthenticated": {
            "type": "boolean",
            "title": "Isauthenticated",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "ExtendedMcpServer"
      },
      "GetAuthDataResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the request was successful"
          },
          "authData": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Authdata",
            "description": "Complete authentication data including access token, refresh token, scope, expiration, and platform-specific data"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message if the request failed"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "GetAuthDataResponse"
      },
      "GetInstanceResponse": {
        "properties": {
          "instanceId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Instanceid",
            "description": "The unique identifier of the connection instance."
          },
          "authNeeded": {
            "type": "boolean",
            "title": "Authneeded",
            "description": "Indicates whether authentication is required for this server instance.",
            "default": false
          },
          "isAuthenticated": {
            "type": "boolean",
            "title": "Isauthenticated",
            "description": "Indicates whether the instance is authenticated successfully.",
            "default": false
          },
          "serverName": {
            "type": "string",
            "title": "Servername",
            "description": "The name of the MCP server associated with the instance.",
            "default": ""
          },
          "platform": {
            "type": "string",
            "title": "Platform",
            "description": "The platform associated with the instance.",
            "default": ""
          },
          "externalUserId": {
            "type": "string",
            "title": "Externaluserid",
            "description": "The user's identifier on the external platform.",
            "default": ""
          }
        },
        "type": "object",
        "title": "GetInstanceResponse"
      },
      "GetMcpServersResponse": {
        "properties": {
          "servers": {
            "items": {
              "$ref": "#/components/schemas/McpServer"
            },
            "type": "array",
            "title": "Servers"
          }
        },
        "type": "object",
        "required": [
          "servers"
        ],
        "title": "GetMcpServersResponse"
      },
      "GetOAuthUrlRequest": {
        "properties": {
          "serverName": {
            "$ref": "#/components/schemas/McpServerName",
            "description": "The name of the target MCP server. Case-insensitive (e.g., 'google calendar', 'GOOGLE_CALENDAR', 'Google Calendar' are all valid)."
          },
          "instanceId": {
            "type": "string",
            "title": "Instanceid",
            "description": "The unique identifier for the connection instance."
          },
          "clientId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Clientid",
            "description": "Optional client ID for white labeling. If not provided, will use default credentials."
          },
          "scope": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Scope",
            "description": "Optional OAuth scopes to request (comma-separated string)."
          },
          "redirectUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redirecturl",
            "description": "Optional URL to redirect to after authorization completes."
          }
        },
        "type": "object",
        "required": [
          "serverName",
          "instanceId"
        ],
        "title": "GetOAuthUrlRequest"
      },
      "GetOAuthUrlResponse": {
        "properties": {
          "oauthUrl": {
            "type": "string",
            "title": "Oauthurl",
            "description": "The OAuth authorization URL for the specified server."
          }
        },
        "type": "object",
        "required": [
          "oauthUrl"
        ],
        "title": "GetOAuthUrlResponse"
      },
      "GetServerInstancesResponse": {
        "properties": {
          "instances": {
            "items": {
              "$ref": "#/components/schemas/ExtendedMcpServer"
            },
            "type": "array",
            "title": "Instances"
          }
        },
        "type": "object",
        "required": [
          "instances"
        ],
        "title": "GetServerInstancesResponse"
      },
      "GetToolsResponse": {
        "properties": {
          "tools": {
            "items": {
              "$ref": "#/components/schemas/ServerTool"
            },
            "type": "array",
            "title": "Tools",
            "description": "List of available tools with their descriptions"
          }
        },
        "type": "object",
        "title": "GetToolsResponse"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "ListToolsRequest": {
        "properties": {
          "serverUrl": {
            "type": "string",
            "title": "Serverurl",
            "description": "The full URL for connecting to the MCP server"
          },
          "connectionType": {
            "$ref": "#/components/schemas/ConnectionType",
            "description": "The connection type to use for the MCP server. Default is STREAMABLE_HTTP.",
            "default": "StreamableHttp"
          },
          "format": {
            "$ref": "#/components/schemas/ToolFormat",
            "description": "The format to return tools in. Default is MCP Native format for maximum compatibility.",
            "default": "mcp_native"
          }
        },
        "type": "object",
        "required": [
          "serverUrl"
        ],
        "title": "ListToolsRequest"
      },
      "ListToolsResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the list tools request was successful"
          },
          "tools": {
            "anyOf": [
              {
                "items": {},
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools",
            "description": "List of tools in the requested format"
          },
          "format": {
            "$ref": "#/components/schemas/ToolFormat",
            "description": "The format of the returned tools"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error",
            "description": "Error message, if the request failed"
          }
        },
        "type": "object",
        "required": [
          "success",
          "format"
        ],
        "title": "ListToolsResponse"
      },
      "McpServer": {
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "tools": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/ServerTool"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tools"
          },
          "authNeeded": {
            "type": "boolean",
            "title": "Authneeded",
            "default": true
          }
        },
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "title": "McpServer"
      },
      "McpServerName": {
        "type": "string",
        "enum": [
          "Affinity",
          "Airtable",
          "Asana",
          "Attio",
          "Brave Search",
          "ClickUp",
          "Close",
          "Confluence",
          "Discord",
          "Dropbox",
          "Doc2markdown",
          "Firecrawl Deep Research",
          "Firecrawl Web Search",
          "GitHub",
          "Gmail",
          "Gong",
          "Google Calendar",
          "Google Docs",
          "Google Drive",
          "Google Sheets",
          "Hacker News",
          "HubSpot",
          "Jira",
          "Klavis ReportGen",
          "Linear",
          "LinkedIn",
          "Markdown2doc",
          "Motion",
          "Notion",
          "Openrouter",
          "Plai",
          "Postgres",
          "QuickBooks",
          "Resend",
          "Salesforce",
          "Slack",
          "Supabase",
          "WhatsApp",
          "WordPress",
          "YouTube"
        ],
        "title": "McpServerName"
      },
      "OAuthServerName": {
        "type": "string",
        "enum": [
          "Airtable",
          "Asana",
          "Attio",
          "Canva",
          "ClickUp",
          "Close",
          "Confluence",
          "GitHub",
          "Gmail",
          "Google Calendar",
          "Google Docs",
          "Google Drive",
          "Google Sheets",
          "HubSpot",
          "Jira",
          "Linear",
          "LinkedIn",
          "Notion",
          "Salesforce",
          "Slack",
          "Supabase",
          "Xero",
          "WordPress",
          "Dropbox",
          "QuickBooks"
        ],
        "title": "OAuthServerName"
      },
      "ServerTool": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "type": "object",
        "required": [
          "name",
          "description"
        ],
        "title": "ServerTool"
      },
      "SetAuthTokenRequest": {
        "properties": {
          "instanceId": {
            "type": "string",
            "title": "Instanceid",
            "description": "The unique identifier for the connection instance"
          },
          "authToken": {
            "type": "string",
            "title": "Authtoken",
            "description": "The authentication token to save"
          }
        },
        "type": "object",
        "required": [
          "instanceId",
          "authToken"
        ],
        "title": "SetAuthTokenRequest"
      },
      "StatusResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "StatusResponse"
      },
      "ToolFormat": {
        "type": "string",
        "enum": [
          "openai",
          "anthropic",
          "gemini",
          "mcp_native"
        ],
        "title": "ToolFormat"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WhiteLabelingResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success",
            "description": "Whether the operation was successful"
          },
          "data": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Data",
            "description": "The white labeling data if successful"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message",
            "description": "Error message if unsuccessful"
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "WhiteLabelingResponse"
      }
    },
    "securitySchemes": {
      "HTTPBearer": {
        "type": "http",
        "description": "Your Klavis AI API key.",
        "scheme": "bearer",
        "x-fern-bearer": {
          "name": "api_key"
        }
      }
    }
  }
}